rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  	function hasAccess(collection, uid, wid) {
    	return wid in get(/databases/$(database)/documents/$(collection)/$(uid)).data.wids;
    }
  	
    function docExists(collection, id) {
    	return exists(/databases/$(database)/documents/$(collection)/$(id));
    }
    
    match /users/{userId} {
    	allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid == userId || docExists("admins", request.auth.uid));
    }
    
    match /workshops/{workshopId} {
    	allow read: if request.auth != null;
      allow create: if request.auth != null && (docExists("creators", request.auth.uid) || docExists("admins", request.auth.uid));
      allow update, delete: if request.auth != null && (hasAccess("creators", request.auth.uid, workshopId) || docExists("admins", request.auth.uid));
      
      match /content/{contentId} {
      	allow read: if request.auth != null && (hasAccess("users", request.auth.uid, workshopId) || hasAccess("creators", request.auth.uid, workshopId) || docExists("admins", request.auth.uid));
        allow create: if request.auth != null && (docExists("creators", request.auth.uid) || docExists("admins", request.auth.uid));
      	allow update, delete: if request.auth != null && (hasAccess("creators", request.auth.uid, workshopId) || docExists("admins", request.auth.uid));
      }
    }
    
    match /creators/{creatorId} {
    	allow read: if request.auth != null;
      allow create, delete: if request.auth != null && docExists("admins", request.auth.uid);
      allow update: if request.auth != null && (docExists("creators", request.auth.uid) || docExists("admins", request.auth.uid));
    }
    
    match /admins/{adminId} {
    	allow read: if request.auth != null;
      allow write: if false;
    }
  }
}